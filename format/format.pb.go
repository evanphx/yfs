// Code generated by protoc-gen-gogo.
// source: format.proto
// DO NOT EDIT!

/*
	Package format is a generated protocol buffer package.

	It is generated from these files:
		format.proto

	It has these top-level messages:
		TOCHeader
		Block
		BlockSet
		TimeSpec
		Entry
		TOC
		BlockInfo
		BlockTOC
*/
package format

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import strconv "strconv"

import bytes "bytes"

import strings "strings"
import github_com_gogo_protobuf_proto "github.com/gogo/protobuf/proto"
import sort "sort"
import reflect "reflect"
import github_com_gogo_protobuf_sortkeys "github.com/gogo/protobuf/sortkeys"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Type int32

const (
	TombStone Type = 0
	File      Type = 1
	Dir       Type = 2
	Link      Type = 3
)

var Type_name = map[int32]string{
	0: "TombStone",
	1: "File",
	2: "Dir",
	3: "Link",
}
var Type_value = map[string]int32{
	"TombStone": 0,
	"File":      1,
	"Dir":       2,
	"Link":      3,
}

func (Type) EnumDescriptor() ([]byte, []int) { return fileDescriptorFormat, []int{0} }

type TOCHeader struct {
	KeyId      []byte `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Compressed bool   `protobuf:"varint,2,opt,name=compressed,proto3" json:"compressed,omitempty"`
	Sum        []byte `protobuf:"bytes,3,opt,name=sum,proto3" json:"sum,omitempty"`
}

func (m *TOCHeader) Reset()                    { *m = TOCHeader{} }
func (*TOCHeader) ProtoMessage()               {}
func (*TOCHeader) Descriptor() ([]byte, []int) { return fileDescriptorFormat, []int{0} }

type Block struct {
	Id []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptorFormat, []int{1} }

type BlockSet struct {
	Blocks   []*Block `protobuf:"bytes,1,rep,name=blocks" json:"blocks,omitempty"`
	Sum      []byte   `protobuf:"bytes,2,opt,name=sum,proto3" json:"sum,omitempty"`
	ByteSize int64    `protobuf:"varint,3,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
}

func (m *BlockSet) Reset()                    { *m = BlockSet{} }
func (*BlockSet) ProtoMessage()               {}
func (*BlockSet) Descriptor() ([]byte, []int) { return fileDescriptorFormat, []int{2} }

func (m *BlockSet) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

type TimeSpec struct {
	Seconds     int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanoseconds int32 `protobuf:"varint,2,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
}

func (m *TimeSpec) Reset()                    { *m = TimeSpec{} }
func (*TimeSpec) ProtoMessage()               {}
func (*TimeSpec) Descriptor() ([]byte, []int) { return fileDescriptorFormat, []int{3} }

type Entry struct {
	ByteSize   int64     `protobuf:"varint,1,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
	Type       Type      `protobuf:"varint,2,opt,name=type,proto3,enum=format.Type" json:"type,omitempty"`
	Hash       []byte    `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	Blocks     *BlockSet `protobuf:"bytes,4,opt,name=blocks" json:"blocks,omitempty"`
	Uname      string    `protobuf:"bytes,5,opt,name=uname,proto3" json:"uname,omitempty"`
	Gname      string    `protobuf:"bytes,6,opt,name=gname,proto3" json:"gname,omitempty"`
	Flags      int32     `protobuf:"varint,7,opt,name=flags,proto3" json:"flags,omitempty"`
	Perm       int32     `protobuf:"varint,8,opt,name=perm,proto3" json:"perm,omitempty"`
	CreatedAt  *TimeSpec `protobuf:"bytes,9,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	ModifiedAt *TimeSpec `protobuf:"bytes,10,opt,name=modified_at,json=modifiedAt" json:"modified_at,omitempty"`
}

func (m *Entry) Reset()                    { *m = Entry{} }
func (*Entry) ProtoMessage()               {}
func (*Entry) Descriptor() ([]byte, []int) { return fileDescriptorFormat, []int{4} }

func (m *Entry) GetBlocks() *BlockSet {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func (m *Entry) GetCreatedAt() *TimeSpec {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Entry) GetModifiedAt() *TimeSpec {
	if m != nil {
		return m.ModifiedAt
	}
	return nil
}

type TOC struct {
	Paths map[string]*Entry `protobuf:"bytes,1,rep,name=paths" json:"paths,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *TOC) Reset()                    { *m = TOC{} }
func (*TOC) ProtoMessage()               {}
func (*TOC) Descriptor() ([]byte, []int) { return fileDescriptorFormat, []int{5} }

func (m *TOC) GetPaths() map[string]*Entry {
	if m != nil {
		return m.Paths
	}
	return nil
}

type BlockInfo struct {
	Id         []byte `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ByteSize   int64  `protobuf:"varint,2,opt,name=byte_size,json=byteSize,proto3" json:"byte_size,omitempty"`
	CompSize   int64  `protobuf:"varint,3,opt,name=comp_size,json=compSize,proto3" json:"comp_size,omitempty"`
	References int64  `protobuf:"varint,4,opt,name=references,proto3" json:"references,omitempty"`
}

func (m *BlockInfo) Reset()                    { *m = BlockInfo{} }
func (*BlockInfo) ProtoMessage()               {}
func (*BlockInfo) Descriptor() ([]byte, []int) { return fileDescriptorFormat, []int{6} }

type BlockTOC struct {
	Blocks []*BlockInfo `protobuf:"bytes,1,rep,name=blocks" json:"blocks,omitempty"`
}

func (m *BlockTOC) Reset()                    { *m = BlockTOC{} }
func (*BlockTOC) ProtoMessage()               {}
func (*BlockTOC) Descriptor() ([]byte, []int) { return fileDescriptorFormat, []int{7} }

func (m *BlockTOC) GetBlocks() []*BlockInfo {
	if m != nil {
		return m.Blocks
	}
	return nil
}

func init() {
	proto.RegisterType((*TOCHeader)(nil), "format.TOCHeader")
	proto.RegisterType((*Block)(nil), "format.Block")
	proto.RegisterType((*BlockSet)(nil), "format.BlockSet")
	proto.RegisterType((*TimeSpec)(nil), "format.TimeSpec")
	proto.RegisterType((*Entry)(nil), "format.Entry")
	proto.RegisterType((*TOC)(nil), "format.TOC")
	proto.RegisterType((*BlockInfo)(nil), "format.BlockInfo")
	proto.RegisterType((*BlockTOC)(nil), "format.BlockTOC")
	proto.RegisterEnum("format.Type", Type_name, Type_value)
}
func (x Type) String() string {
	s, ok := Type_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *TOCHeader) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TOCHeader)
	if !ok {
		that2, ok := that.(TOCHeader)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.KeyId, that1.KeyId) {
		return false
	}
	if this.Compressed != that1.Compressed {
		return false
	}
	if !bytes.Equal(this.Sum, that1.Sum) {
		return false
	}
	return true
}
func (this *Block) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Block)
	if !ok {
		that2, ok := that.(Block)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Id, that1.Id) {
		return false
	}
	return true
}
func (this *BlockSet) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BlockSet)
	if !ok {
		that2, ok := that.(BlockSet)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Blocks) != len(that1.Blocks) {
		return false
	}
	for i := range this.Blocks {
		if !this.Blocks[i].Equal(that1.Blocks[i]) {
			return false
		}
	}
	if !bytes.Equal(this.Sum, that1.Sum) {
		return false
	}
	if this.ByteSize != that1.ByteSize {
		return false
	}
	return true
}
func (this *TimeSpec) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TimeSpec)
	if !ok {
		that2, ok := that.(TimeSpec)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.Seconds != that1.Seconds {
		return false
	}
	if this.Nanoseconds != that1.Nanoseconds {
		return false
	}
	return true
}
func (this *Entry) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*Entry)
	if !ok {
		that2, ok := that.(Entry)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if this.ByteSize != that1.ByteSize {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	if !bytes.Equal(this.Hash, that1.Hash) {
		return false
	}
	if !this.Blocks.Equal(that1.Blocks) {
		return false
	}
	if this.Uname != that1.Uname {
		return false
	}
	if this.Gname != that1.Gname {
		return false
	}
	if this.Flags != that1.Flags {
		return false
	}
	if this.Perm != that1.Perm {
		return false
	}
	if !this.CreatedAt.Equal(that1.CreatedAt) {
		return false
	}
	if !this.ModifiedAt.Equal(that1.ModifiedAt) {
		return false
	}
	return true
}
func (this *TOC) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*TOC)
	if !ok {
		that2, ok := that.(TOC)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Paths) != len(that1.Paths) {
		return false
	}
	for i := range this.Paths {
		if !this.Paths[i].Equal(that1.Paths[i]) {
			return false
		}
	}
	return true
}
func (this *BlockInfo) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BlockInfo)
	if !ok {
		that2, ok := that.(BlockInfo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.Id, that1.Id) {
		return false
	}
	if this.ByteSize != that1.ByteSize {
		return false
	}
	if this.CompSize != that1.CompSize {
		return false
	}
	if this.References != that1.References {
		return false
	}
	return true
}
func (this *BlockTOC) Equal(that interface{}) bool {
	if that == nil {
		if this == nil {
			return true
		}
		return false
	}

	that1, ok := that.(*BlockTOC)
	if !ok {
		that2, ok := that.(BlockTOC)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		if this == nil {
			return true
		}
		return false
	} else if this == nil {
		return false
	}
	if len(this.Blocks) != len(that1.Blocks) {
		return false
	}
	for i := range this.Blocks {
		if !this.Blocks[i].Equal(that1.Blocks[i]) {
			return false
		}
	}
	return true
}
func (this *TOCHeader) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&format.TOCHeader{")
	s = append(s, "KeyId: "+fmt.Sprintf("%#v", this.KeyId)+",\n")
	s = append(s, "Compressed: "+fmt.Sprintf("%#v", this.Compressed)+",\n")
	s = append(s, "Sum: "+fmt.Sprintf("%#v", this.Sum)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Block) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&format.Block{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BlockSet) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&format.BlockSet{")
	if this.Blocks != nil {
		s = append(s, "Blocks: "+fmt.Sprintf("%#v", this.Blocks)+",\n")
	}
	s = append(s, "Sum: "+fmt.Sprintf("%#v", this.Sum)+",\n")
	s = append(s, "ByteSize: "+fmt.Sprintf("%#v", this.ByteSize)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TimeSpec) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&format.TimeSpec{")
	s = append(s, "Seconds: "+fmt.Sprintf("%#v", this.Seconds)+",\n")
	s = append(s, "Nanoseconds: "+fmt.Sprintf("%#v", this.Nanoseconds)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Entry) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 14)
	s = append(s, "&format.Entry{")
	s = append(s, "ByteSize: "+fmt.Sprintf("%#v", this.ByteSize)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "Hash: "+fmt.Sprintf("%#v", this.Hash)+",\n")
	if this.Blocks != nil {
		s = append(s, "Blocks: "+fmt.Sprintf("%#v", this.Blocks)+",\n")
	}
	s = append(s, "Uname: "+fmt.Sprintf("%#v", this.Uname)+",\n")
	s = append(s, "Gname: "+fmt.Sprintf("%#v", this.Gname)+",\n")
	s = append(s, "Flags: "+fmt.Sprintf("%#v", this.Flags)+",\n")
	s = append(s, "Perm: "+fmt.Sprintf("%#v", this.Perm)+",\n")
	if this.CreatedAt != nil {
		s = append(s, "CreatedAt: "+fmt.Sprintf("%#v", this.CreatedAt)+",\n")
	}
	if this.ModifiedAt != nil {
		s = append(s, "ModifiedAt: "+fmt.Sprintf("%#v", this.ModifiedAt)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *TOC) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&format.TOC{")
	keysForPaths := make([]string, 0, len(this.Paths))
	for k, _ := range this.Paths {
		keysForPaths = append(keysForPaths, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPaths)
	mapStringForPaths := "map[string]*Entry{"
	for _, k := range keysForPaths {
		mapStringForPaths += fmt.Sprintf("%#v: %#v,", k, this.Paths[k])
	}
	mapStringForPaths += "}"
	if this.Paths != nil {
		s = append(s, "Paths: "+mapStringForPaths+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BlockInfo) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 8)
	s = append(s, "&format.BlockInfo{")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "ByteSize: "+fmt.Sprintf("%#v", this.ByteSize)+",\n")
	s = append(s, "CompSize: "+fmt.Sprintf("%#v", this.CompSize)+",\n")
	s = append(s, "References: "+fmt.Sprintf("%#v", this.References)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BlockTOC) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&format.BlockTOC{")
	if this.Blocks != nil {
		s = append(s, "Blocks: "+fmt.Sprintf("%#v", this.Blocks)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringFormat(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func extensionToGoStringFormat(m github_com_gogo_protobuf_proto.Message) string {
	e := github_com_gogo_protobuf_proto.GetUnsafeExtensionsMap(m)
	if e == nil {
		return "nil"
	}
	s := "proto.NewUnsafeXXX_InternalExtensions(map[int32]proto.Extension{"
	keys := make([]int, 0, len(e))
	for k := range e {
		keys = append(keys, int(k))
	}
	sort.Ints(keys)
	ss := []string{}
	for _, k := range keys {
		ss = append(ss, strconv.Itoa(k)+": "+e[int32(k)].GoString())
	}
	s += strings.Join(ss, ",") + "})"
	return s
}
func (m *TOCHeader) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TOCHeader) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.KeyId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFormat(dAtA, i, uint64(len(m.KeyId)))
		i += copy(dAtA[i:], m.KeyId)
	}
	if m.Compressed {
		dAtA[i] = 0x10
		i++
		if m.Compressed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if len(m.Sum) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFormat(dAtA, i, uint64(len(m.Sum)))
		i += copy(dAtA[i:], m.Sum)
	}
	return i, nil
}

func (m *Block) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Block) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFormat(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *BlockSet) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockSet) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, msg := range m.Blocks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFormat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Sum) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintFormat(dAtA, i, uint64(len(m.Sum)))
		i += copy(dAtA[i:], m.Sum)
	}
	if m.ByteSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFormat(dAtA, i, uint64(m.ByteSize))
	}
	return i, nil
}

func (m *TimeSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TimeSpec) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Seconds != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFormat(dAtA, i, uint64(m.Seconds))
	}
	if m.Nanoseconds != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFormat(dAtA, i, uint64(m.Nanoseconds))
	}
	return i, nil
}

func (m *Entry) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Entry) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ByteSize != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintFormat(dAtA, i, uint64(m.ByteSize))
	}
	if m.Type != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFormat(dAtA, i, uint64(m.Type))
	}
	if len(m.Hash) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintFormat(dAtA, i, uint64(len(m.Hash)))
		i += copy(dAtA[i:], m.Hash)
	}
	if m.Blocks != nil {
		dAtA[i] = 0x22
		i++
		i = encodeVarintFormat(dAtA, i, uint64(m.Blocks.Size()))
		n1, err := m.Blocks.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Uname) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintFormat(dAtA, i, uint64(len(m.Uname)))
		i += copy(dAtA[i:], m.Uname)
	}
	if len(m.Gname) > 0 {
		dAtA[i] = 0x32
		i++
		i = encodeVarintFormat(dAtA, i, uint64(len(m.Gname)))
		i += copy(dAtA[i:], m.Gname)
	}
	if m.Flags != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintFormat(dAtA, i, uint64(m.Flags))
	}
	if m.Perm != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintFormat(dAtA, i, uint64(m.Perm))
	}
	if m.CreatedAt != nil {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintFormat(dAtA, i, uint64(m.CreatedAt.Size()))
		n2, err := m.CreatedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ModifiedAt != nil {
		dAtA[i] = 0x52
		i++
		i = encodeVarintFormat(dAtA, i, uint64(m.ModifiedAt.Size()))
		n3, err := m.ModifiedAt.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func (m *TOC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TOC) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Paths) > 0 {
		for k, _ := range m.Paths {
			dAtA[i] = 0xa
			i++
			v := m.Paths[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovFormat(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovFormat(uint64(len(k))) + msgSize
			i = encodeVarintFormat(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintFormat(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintFormat(dAtA, i, uint64(v.Size()))
				n4, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n4
			}
		}
	}
	return i, nil
}

func (m *BlockInfo) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockInfo) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintFormat(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	if m.ByteSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintFormat(dAtA, i, uint64(m.ByteSize))
	}
	if m.CompSize != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintFormat(dAtA, i, uint64(m.CompSize))
	}
	if m.References != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintFormat(dAtA, i, uint64(m.References))
	}
	return i, nil
}

func (m *BlockTOC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BlockTOC) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, msg := range m.Blocks {
			dAtA[i] = 0xa
			i++
			i = encodeVarintFormat(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func encodeFixed64Format(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Format(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintFormat(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *TOCHeader) Size() (n int) {
	var l int
	_ = l
	l = len(m.KeyId)
	if l > 0 {
		n += 1 + l + sovFormat(uint64(l))
	}
	if m.Compressed {
		n += 2
	}
	l = len(m.Sum)
	if l > 0 {
		n += 1 + l + sovFormat(uint64(l))
	}
	return n
}

func (m *Block) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFormat(uint64(l))
	}
	return n
}

func (m *BlockSet) Size() (n int) {
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovFormat(uint64(l))
		}
	}
	l = len(m.Sum)
	if l > 0 {
		n += 1 + l + sovFormat(uint64(l))
	}
	if m.ByteSize != 0 {
		n += 1 + sovFormat(uint64(m.ByteSize))
	}
	return n
}

func (m *TimeSpec) Size() (n int) {
	var l int
	_ = l
	if m.Seconds != 0 {
		n += 1 + sovFormat(uint64(m.Seconds))
	}
	if m.Nanoseconds != 0 {
		n += 1 + sovFormat(uint64(m.Nanoseconds))
	}
	return n
}

func (m *Entry) Size() (n int) {
	var l int
	_ = l
	if m.ByteSize != 0 {
		n += 1 + sovFormat(uint64(m.ByteSize))
	}
	if m.Type != 0 {
		n += 1 + sovFormat(uint64(m.Type))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovFormat(uint64(l))
	}
	if m.Blocks != nil {
		l = m.Blocks.Size()
		n += 1 + l + sovFormat(uint64(l))
	}
	l = len(m.Uname)
	if l > 0 {
		n += 1 + l + sovFormat(uint64(l))
	}
	l = len(m.Gname)
	if l > 0 {
		n += 1 + l + sovFormat(uint64(l))
	}
	if m.Flags != 0 {
		n += 1 + sovFormat(uint64(m.Flags))
	}
	if m.Perm != 0 {
		n += 1 + sovFormat(uint64(m.Perm))
	}
	if m.CreatedAt != nil {
		l = m.CreatedAt.Size()
		n += 1 + l + sovFormat(uint64(l))
	}
	if m.ModifiedAt != nil {
		l = m.ModifiedAt.Size()
		n += 1 + l + sovFormat(uint64(l))
	}
	return n
}

func (m *TOC) Size() (n int) {
	var l int
	_ = l
	if len(m.Paths) > 0 {
		for k, v := range m.Paths {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovFormat(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovFormat(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovFormat(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *BlockInfo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovFormat(uint64(l))
	}
	if m.ByteSize != 0 {
		n += 1 + sovFormat(uint64(m.ByteSize))
	}
	if m.CompSize != 0 {
		n += 1 + sovFormat(uint64(m.CompSize))
	}
	if m.References != 0 {
		n += 1 + sovFormat(uint64(m.References))
	}
	return n
}

func (m *BlockTOC) Size() (n int) {
	var l int
	_ = l
	if len(m.Blocks) > 0 {
		for _, e := range m.Blocks {
			l = e.Size()
			n += 1 + l + sovFormat(uint64(l))
		}
	}
	return n
}

func sovFormat(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozFormat(x uint64) (n int) {
	return sovFormat(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *TOCHeader) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TOCHeader{`,
		`KeyId:` + fmt.Sprintf("%v", this.KeyId) + `,`,
		`Compressed:` + fmt.Sprintf("%v", this.Compressed) + `,`,
		`Sum:` + fmt.Sprintf("%v", this.Sum) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Block) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Block{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlockSet) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlockSet{`,
		`Blocks:` + strings.Replace(fmt.Sprintf("%v", this.Blocks), "Block", "Block", 1) + `,`,
		`Sum:` + fmt.Sprintf("%v", this.Sum) + `,`,
		`ByteSize:` + fmt.Sprintf("%v", this.ByteSize) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TimeSpec) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&TimeSpec{`,
		`Seconds:` + fmt.Sprintf("%v", this.Seconds) + `,`,
		`Nanoseconds:` + fmt.Sprintf("%v", this.Nanoseconds) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Entry) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Entry{`,
		`ByteSize:` + fmt.Sprintf("%v", this.ByteSize) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`Hash:` + fmt.Sprintf("%v", this.Hash) + `,`,
		`Blocks:` + strings.Replace(fmt.Sprintf("%v", this.Blocks), "BlockSet", "BlockSet", 1) + `,`,
		`Uname:` + fmt.Sprintf("%v", this.Uname) + `,`,
		`Gname:` + fmt.Sprintf("%v", this.Gname) + `,`,
		`Flags:` + fmt.Sprintf("%v", this.Flags) + `,`,
		`Perm:` + fmt.Sprintf("%v", this.Perm) + `,`,
		`CreatedAt:` + strings.Replace(fmt.Sprintf("%v", this.CreatedAt), "TimeSpec", "TimeSpec", 1) + `,`,
		`ModifiedAt:` + strings.Replace(fmt.Sprintf("%v", this.ModifiedAt), "TimeSpec", "TimeSpec", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *TOC) String() string {
	if this == nil {
		return "nil"
	}
	keysForPaths := make([]string, 0, len(this.Paths))
	for k, _ := range this.Paths {
		keysForPaths = append(keysForPaths, k)
	}
	github_com_gogo_protobuf_sortkeys.Strings(keysForPaths)
	mapStringForPaths := "map[string]*Entry{"
	for _, k := range keysForPaths {
		mapStringForPaths += fmt.Sprintf("%v: %v,", k, this.Paths[k])
	}
	mapStringForPaths += "}"
	s := strings.Join([]string{`&TOC{`,
		`Paths:` + mapStringForPaths + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlockInfo) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlockInfo{`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`ByteSize:` + fmt.Sprintf("%v", this.ByteSize) + `,`,
		`CompSize:` + fmt.Sprintf("%v", this.CompSize) + `,`,
		`References:` + fmt.Sprintf("%v", this.References) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BlockTOC) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BlockTOC{`,
		`Blocks:` + strings.Replace(fmt.Sprintf("%v", this.Blocks), "BlockInfo", "BlockInfo", 1) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringFormat(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *TOCHeader) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TOCHeader: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TOCHeader: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFormat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyId = append(m.KeyId[:0], dAtA[iNdEx:postIndex]...)
			if m.KeyId == nil {
				m.KeyId = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Compressed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Compressed = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFormat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sum = append(m.Sum[:0], dAtA[iNdEx:postIndex]...)
			if m.Sum == nil {
				m.Sum = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Block) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Block: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Block: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFormat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockSet) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockSet: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockSet: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &Block{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sum", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFormat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sum = append(m.Sum[:0], dAtA[iNdEx:postIndex]...)
			if m.Sum == nil {
				m.Sum = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteSize", wireType)
			}
			m.ByteSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ByteSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TimeSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TimeSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TimeSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nanoseconds", wireType)
			}
			m.Nanoseconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nanoseconds |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Entry) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Entry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Entry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteSize", wireType)
			}
			m.ByteSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ByteSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (Type(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFormat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Blocks == nil {
				m.Blocks = &BlockSet{}
			}
			if err := m.Blocks.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthFormat
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Perm", wireType)
			}
			m.Perm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Perm |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CreatedAt == nil {
				m.CreatedAt = &TimeSpec{}
			}
			if err := m.CreatedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModifiedAt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ModifiedAt == nil {
				m.ModifiedAt = &TimeSpec{}
			}
			if err := m.ModifiedAt.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TOC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TOC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TOC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Paths", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthFormat
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(dAtA[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			if m.Paths == nil {
				m.Paths = make(map[string]*Entry)
			}
			if iNdEx < postIndex {
				var valuekey uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFormat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					valuekey |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				var mapmsglen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowFormat
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					mapmsglen |= (int(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if mapmsglen < 0 {
					return ErrInvalidLengthFormat
				}
				postmsgIndex := iNdEx + mapmsglen
				if mapmsglen < 0 {
					return ErrInvalidLengthFormat
				}
				if postmsgIndex > l {
					return io.ErrUnexpectedEOF
				}
				mapvalue := &Entry{}
				if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
					return err
				}
				iNdEx = postmsgIndex
				m.Paths[mapkey] = mapvalue
			} else {
				var mapvalue *Entry
				m.Paths[mapkey] = mapvalue
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockInfo) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockInfo: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockInfo: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthFormat
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = append(m.Id[:0], dAtA[iNdEx:postIndex]...)
			if m.Id == nil {
				m.Id = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ByteSize", wireType)
			}
			m.ByteSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ByteSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompSize", wireType)
			}
			m.CompSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CompSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field References", wireType)
			}
			m.References = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.References |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipFormat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BlockTOC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowFormat
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BlockTOC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BlockTOC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Blocks", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthFormat
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Blocks = append(m.Blocks, &BlockInfo{})
			if err := m.Blocks[len(m.Blocks)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipFormat(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthFormat
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipFormat(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowFormat
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowFormat
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthFormat
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowFormat
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipFormat(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthFormat = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowFormat   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("format.proto", fileDescriptorFormat) }

var fileDescriptorFormat = []byte{
	// 590 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0xcd, 0xd8, 0x71, 0x1a, 0xdf, 0xb4, 0x55, 0xbe, 0xd1, 0x07, 0x58, 0x54, 0x1a, 0x59, 0x46,
	0x48, 0x01, 0x55, 0x45, 0x04, 0x21, 0x21, 0x76, 0x6d, 0xa1, 0x50, 0x09, 0xa9, 0x68, 0xe2, 0x7d,
	0x71, 0xec, 0x9b, 0xd6, 0x4a, 0xfc, 0x23, 0x7b, 0x82, 0xe4, 0x8a, 0x05, 0x8f, 0xc0, 0x63, 0xf0,
	0x14, 0xac, 0x59, 0x76, 0xc9, 0x92, 0x9a, 0x0d, 0xcb, 0x3e, 0x02, 0x9a, 0xb1, 0x1d, 0xe2, 0x48,
	0xec, 0xee, 0x9c, 0xfb, 0x7f, 0xcf, 0x19, 0xd8, 0x9e, 0x25, 0x59, 0xe4, 0x89, 0x83, 0x34, 0x4b,
	0x44, 0x42, 0x7b, 0xd5, 0xcb, 0x71, 0xc1, 0x74, 0xcf, 0x8e, 0xdf, 0xa2, 0x17, 0x60, 0x46, 0xef,
	0x40, 0x6f, 0x8e, 0xc5, 0x79, 0x18, 0x58, 0xc4, 0x26, 0xa3, 0x6d, 0x6e, 0xcc, 0xb1, 0x38, 0x0d,
	0x28, 0x03, 0xf0, 0x93, 0x28, 0xcd, 0x30, 0xcf, 0x31, 0xb0, 0x34, 0x9b, 0x8c, 0xfa, 0x7c, 0x0d,
	0xa1, 0x43, 0xd0, 0xf3, 0x65, 0x64, 0xe9, 0x2a, 0x47, 0x9a, 0xce, 0x3d, 0x30, 0x8e, 0x16, 0x89,
	0x3f, 0xa7, 0xbb, 0xa0, 0xad, 0xaa, 0x69, 0x61, 0xe0, 0x7c, 0x80, 0xbe, 0x72, 0x4c, 0x50, 0xd0,
	0x87, 0xd0, 0x9b, 0x4a, 0x3b, 0xb7, 0x88, 0xad, 0x8f, 0x06, 0xe3, 0x9d, 0x83, 0x7a, 0x42, 0x15,
	0xc1, 0x6b, 0x67, 0x53, 0x5d, 0x5b, 0x55, 0xa7, 0x7b, 0x60, 0x4e, 0x0b, 0x81, 0xe7, 0x79, 0x78,
	0x85, 0xaa, 0xab, 0xce, 0xfb, 0x12, 0x98, 0x84, 0x57, 0xe8, 0x9c, 0x40, 0xdf, 0x0d, 0x23, 0x9c,
	0xa4, 0xe8, 0x53, 0x0b, 0xb6, 0x72, 0xf4, 0x93, 0x38, 0xc8, 0xd5, 0x08, 0x3a, 0x6f, 0x9e, 0xd4,
	0x86, 0x41, 0xec, 0xc5, 0x49, 0xe3, 0x95, 0xc5, 0x0d, 0xbe, 0x0e, 0x39, 0xdf, 0x34, 0x30, 0x5e,
	0xc7, 0x22, 0x2b, 0xda, 0xed, 0x48, 0xbb, 0x1d, 0xb5, 0xa1, 0x2b, 0x8a, 0x14, 0x55, 0x85, 0xdd,
	0xf1, 0x76, 0xb3, 0x82, 0x5b, 0xa4, 0xc8, 0x95, 0x87, 0x52, 0xe8, 0x5e, 0x7a, 0xf9, 0x65, 0x7d,
	0x1e, 0x65, 0xd3, 0xd1, 0x6a, 0xf5, 0xae, 0x4d, 0x46, 0x83, 0xf1, 0xb0, 0xb5, 0xfa, 0x04, 0xc5,
	0x6a, 0xfb, 0xff, 0xc1, 0x58, 0xc6, 0x5e, 0x84, 0x96, 0x61, 0x93, 0x91, 0xc9, 0xab, 0x87, 0x44,
	0x2f, 0x14, 0xda, 0xab, 0xd0, 0x8b, 0x06, 0x9d, 0x2d, 0xbc, 0x8b, 0xdc, 0xda, 0x52, 0xeb, 0x54,
	0x0f, 0xd9, 0x3f, 0xc5, 0x2c, 0xb2, 0xfa, 0x0a, 0x54, 0x36, 0x7d, 0x02, 0xe0, 0x67, 0xe8, 0x09,
	0x0c, 0xce, 0x3d, 0x61, 0x99, 0xed, 0x19, 0x9a, 0xf3, 0x71, 0xb3, 0x8e, 0x39, 0x14, 0xf4, 0x29,
	0x0c, 0xa2, 0x24, 0x08, 0x67, 0x61, 0x95, 0x01, 0xff, 0xc8, 0x80, 0x26, 0xe8, 0x50, 0x38, 0x9f,
	0x40, 0x77, 0xcf, 0x8e, 0xe9, 0x3e, 0x18, 0xa9, 0x27, 0x2e, 0x1b, 0x92, 0xef, 0xae, 0x72, 0xce,
	0x8e, 0x0f, 0xde, 0x4b, 0x87, 0x3a, 0x32, 0xaf, 0x82, 0xee, 0xbf, 0x01, 0xf8, 0x0b, 0x4a, 0xea,
	0xe7, 0x58, 0xa8, 0x9b, 0x9b, 0x5c, 0x9a, 0xf4, 0x01, 0x18, 0x1f, 0xbd, 0xc5, 0xb2, 0xba, 0xf7,
	0x9a, 0x64, 0xea, 0x22, 0xca, 0xf7, 0x52, 0x7b, 0x41, 0x9c, 0x25, 0x98, 0xea, 0x96, 0xa7, 0xf1,
	0x2c, 0xd9, 0x54, 0x61, 0x9b, 0x51, 0x6d, 0x83, 0xd1, 0x3d, 0x30, 0xa5, 0xb6, 0x5b, 0xea, 0x92,
	0x80, 0x72, 0x32, 0x80, 0x0c, 0x67, 0x98, 0x61, 0xec, 0x63, 0x45, 0x9e, 0xce, 0xd7, 0x10, 0xe7,
	0x79, 0xad, 0x6f, 0xb9, 0xf9, 0xa3, 0x0d, 0x7d, 0xff, 0xd7, 0x22, 0x59, 0x0e, 0xd6, 0xb0, 0xfc,
	0x78, 0x0c, 0x5d, 0xa9, 0x18, 0xba, 0x03, 0xa6, 0x9b, 0x44, 0xd3, 0x89, 0x48, 0x62, 0x1c, 0x76,
	0x68, 0x1f, 0xba, 0x27, 0xe1, 0x02, 0x87, 0x84, 0x6e, 0x81, 0xfe, 0x2a, 0xcc, 0x86, 0x9a, 0x84,
	0xde, 0x85, 0xf1, 0x7c, 0xa8, 0x1f, 0xed, 0x5f, 0xdf, 0xb0, 0xce, 0x8f, 0x1b, 0xd6, 0xb9, 0xbd,
	0x61, 0xe4, 0x73, 0xc9, 0xc8, 0xd7, 0x92, 0x91, 0xef, 0x25, 0x23, 0xd7, 0x25, 0x23, 0x3f, 0x4b,
	0x46, 0x7e, 0x97, 0xac, 0x73, 0x5b, 0x32, 0xf2, 0xe5, 0x17, 0xeb, 0x4c, 0x7b, 0xea, 0xdb, 0x3f,
	0xfb, 0x13, 0x00, 0x00, 0xff, 0xff, 0xfa, 0xbe, 0xed, 0x5b, 0x06, 0x04, 0x00, 0x00,
}
